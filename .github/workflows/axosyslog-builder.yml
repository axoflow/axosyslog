name: AxoSyslog Builder image builder

permissions: write-all

on:
  push:
    paths:
      - '.github/workflows/axosyslog-builder.yml'
      - 'docker/**'
    branches:
      - main
  schedule:
    # run weekly to regenerate the build container
    - cron: '00 23 * * 6'
  workflow_dispatch:
    inputs:
      platforms:
        required: false
        type: string
        default: linux/amd64,linux/arm64,linux/arm/v7

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      platform-matrix: ${{ steps.platforms.outputs.platform-matrix }}
      image-name: ${{ steps.registry.outputs.image-name }}
    steps:
      - id: platforms
        name: platform
        env:
          PLATFORMS: ${{ inputs.platforms || 'linux/amd64,linux/arm64,linux/arm/v7' }}
        run: |
          PLATFORM_MATRIX="$(echo "$PLATFORMS" | jq 'split(",")' -Rc)"
          echo "platform-matrix=$PLATFORM_MATRIX" >> $GITHUB_OUTPUT
      - id: registry
        name: registry
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/axosyslog-builder"
          IMAGE_NAME="$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')"
          echo "image-name=$IMAGE_NAME" >> $GITHUB_OUTPUT


  image-build:
    if: github.repository_owner == 'axoflow' || github.event_name != 'schedule'
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: prepare

    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJSON(needs.prepare.outputs.platform-matrix) }}

    steps:
      - name: Prepare
        env:
          PLATFORM: ${{ matrix.platform }}
          REBUILD_DEPS: main/musl main/jemalloc main/json-c main/glib community/grpc main/python3
        run: |
          echo "PLATFORM_PAIR=${PLATFORM//\//-}" >> $GITHUB_ENV
          if [ $PLATFORM = "linux/arm/v7" ]; then
              # on armv7 we only do a minimal rebuild
              REBUILD_DEPS=main/json-c
          fi
          echo "REBUILD_DEPS=$REBUILD_DEPS" >> $GITHUB_ENV

      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Builder image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: docker
          file: docker/axosyslog-builder.dockerfile
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ needs.prepare.outputs.image-name }},push-by-digest=true,name-canonical=true,push=true
          build-args: |
            REBUILD_DEPS=${{ env.REBUILD_DEPS }}

      - name: Export digest
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          mkdir -p /tmp/digests
          touch "/tmp/digests/${DIGEST#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-and-push:
    runs-on: ubuntu-latest
    needs: [prepare, image-build]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        working-directory: /tmp/digests
        env:
          TAGS: ${{ needs.prepare.outputs.image-name }}:latest
          IMAGE_NAME: ${{ needs.prepare.outputs.image-name }}
        run: |
          TAG_FLAGS="$(echo "$TAGS" | sed "s|[^,]*|-t &|g" | tr ',' ' ')"
          docker buildx imagetools create $TAG_FLAGS $(printf "$IMAGE_NAME@sha256:%s " *)
