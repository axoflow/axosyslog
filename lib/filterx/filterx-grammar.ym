/*
 * Copyright (c) 2024 Axoflow
 * Copyright (c) 2024 Attila Szakacs <attila.szakacs@axoflow.com>
 * Copyright (c) 2023 Balazs Scheidler <balazs.scheidler@axoflow.com>
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code requires {

#include "filterx/filterx-parser.h"

}

%code {

/* filterx language constructs */
#include "filterx/expr-literal.h"
#include "filterx/expr-variable.h"
#include "filterx/expr-template.h"
#include "filterx/expr-boolalg.h"
#include "filterx/expr-assign.h"
#include "filterx/expr-getattr.h"
#include "filterx/expr-setattr.h"
#include "filterx/expr-get-subscript.h"
#include "filterx/expr-set-subscript.h"
#include "filterx/expr-comparison.h"
#include "filterx/object-primitive.h"
#include "filterx/object-null.h"
#include "filterx/object-string.h"
#include "filterx/filterx-config.h"
#include "filterx/expr-function.h"
#include "filterx/expr-condition.h"
#include "filterx/expr-switch.h"
#include "filterx/expr-isset.h"
#include "filterx/expr-unset.h"
#include "filterx/expr-literal-container.h"
#include "filterx/expr-compound.h"
#include "filterx/expr-regexp.h"
#include "filterx/expr-plus.h"
#include "filterx/expr-null-coalesce.h"
#include "filterx/expr-plus-generator.h"
#include "filterx/expr-drop.h"
#include "filterx/expr-done.h"
#include "filterx/expr-break.h"
#include "filterx/expr-membership.h"
#include "filterx/expr-arithmetic-operators.h"

#include "template/templates.h"

FilterXExpr *
construct_template_expr(LogTemplate *template)
{
  FilterXExpr *result;

  if (log_template_is_literal_string(template))
    {
      FilterXObject *obj = filterx_string_new(log_template_get_literal_value(template, NULL), -1);
      filterx_object_freeze(&obj, configuration);
      result = filterx_literal_new(obj);
    }
  else if (log_template_is_trivial(template))
    result = filterx_msg_variable_expr_new(log_msg_get_value_name(log_template_get_trivial_value_handle(template), NULL));
  else
    result = filterx_template_new(log_template_ref(template));
  log_template_unref(template);
  return result;
}

static FilterXExpr *
_assign_location(FilterXExpr *expr, CfgLexer *lexer, CFG_LTYPE *lloc)
{
  if (!expr)
    return NULL;

  filterx_expr_set_location(expr, lexer, lloc);
  return expr;
}

#define CHECK_FUNCTION_ERROR(val, token, function, error) do {       \
    if (!(val))                                                         \
      {                                                                 \
        gchar __buf[256];                                               \
        g_snprintf(__buf, sizeof(__buf), "%s(): %s", function, error->message); \
        yyerror(& (token), lexer, NULL, NULL, __buf);                   \
        g_clear_error(&error);						\
        YYERROR;                                                        \
      }                                                                 \
  } while (0)


}

%define api.prefix {filterx_}
%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {FilterXExpr **result}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_TRUE, KW_FALSE
%token KW_NULL
%token KW_ENUM
%token KW_ISSET
%token KW_DECLARE
%token KW_DROP
%token KW_DONE
%token KW_BREAK
%token KW_SWITCH
%token KW_CASE
%token KW_DEFAULT

%type <ptr> block
%type <ptr> stmts
%type <node> stmt
%type <node> stmt_expr
%type <node> complex_expr
%type <node> __complex_expr
%type <node> switch_case
%type <ptr> cases
%type <ptr> case
%type <node> assignment
%type <node> plus_assignment
%type <node> nullv_assignment
%type <node> generator_plus_assignment
%type <node> generator_assignment
%type <node> generator_casted_assignment
%type <node> declaration
%type <node> expr
%type <node> __expr
%type <node> expr_value
%type <node> expr_operator
%type <node> boolalg_operator
%type <node> comparison_operator
%type <node> membership_operator
%type <node> arithmetic_operator
%type <node> expr_generator
%type <node> __expr_generator
%type <node> expr_plus_generator
%type <node> generator_function_call
%type <node> function_call
%type <ptr> arguments
%type <ptr> first_argument
%type <ptr> rest_argument
%type <node> literal
%type <ptr> literal_object
%type <cptr> slash_string
%type <cptr> fx_string
%type <node> variable
%type <node> filterx_variable
%type <ptr> template
%type <ptr> dict_literal
%type <ptr> dict_element
%type <ptr> dict_elements
%type <ptr> list_literal
%type <ptr> list_element
%type <ptr> list_elements
%type <ptr> regexp_match
%type <num> boolean
%type <ptr> conditional
%type <ptr> condition
%type <ptr> if
%type <ptr> ternary
%type <ptr> default
%type <cptr> identifier
%type <cptr> func_name
%type <cptr> gen_func_name

%%

start
        : block					{ *result = $1; if (yychar != FILTERX_EMPTY) { cfg_lexer_unput_token(lexer, &yylval); } YYACCEPT; }
	;

block
	: '{' stmts '}'				{
                                                  FilterXExpr *block = filterx_compound_expr_new(FALSE);
                                                  filterx_compound_expr_add_list(block, $2);
						  filterx_expr_set_location_with_text(block, &@$, "{ ... }");
                                                  $$ = block;
                                                }
	;

stmts
	: stmt stmts				{ if ($1) $$ = g_list_prepend($2, $1); else $$ = $2; }
	|					{ $$ = NULL; }
	;


stmt
	: stmt_expr ';'				{
						  CHECK_ERROR($1, @1, "failed to initialize statement");
						  $$ = $1;
						}
	| ';'					{ $$ = NULL; }
	| conditional				{ $$ = _assign_location($1, lexer, &@1); }
	| switch_case				{ $$ = _assign_location($1, lexer, &@1); }
	;

stmt_expr
	: expr
	| complex_expr
	;

complex_expr: __complex_expr			{ $$ = _assign_location($1, lexer, &@1); }

__complex_expr
	: assignment
	| declaration
	;

plus_assignment
	: variable KW_PLUS_ASSIGN expr		{ $$ = filterx_assign_new(filterx_expr_ref($1), filterx_operator_plus_new($1, $3)); }
	| expr '[' expr ']' KW_PLUS_ASSIGN expr	{ $$ = filterx_set_subscript_new(filterx_expr_ref($1), filterx_expr_ref($3), filterx_operator_plus_new(filterx_get_subscript_new($1, $3), $6)); }
	| expr '.' identifier KW_PLUS_ASSIGN expr
						{
						  $$ = filterx_setattr_new(filterx_expr_ref($1),
						                           filterx_string_new_frozen($3, configuration),
						                           filterx_operator_plus_new(filterx_getattr_new($1, filterx_string_new_frozen($3, configuration)),
						                           $5));
						  free($3);
						}
	;


assignment
	/* TODO extract lvalues */
	: variable KW_ASSIGN expr		{ $$ = filterx_assign_new($1, $3); }
	| expr '.' identifier KW_ASSIGN expr	{ $$ = filterx_setattr_new($1, filterx_string_new_frozen($3, configuration), $5); free($3); }
	| expr '[' expr ']' KW_ASSIGN expr	{ $$ = filterx_set_subscript_new($1, $3, $6); }
	| expr '[' ']' KW_ASSIGN expr  		{ $$ = filterx_set_subscript_new($1, NULL, $5); }
	| generator_assignment
	| plus_assignment
	| nullv_assignment
	;

nullv_assignment
	: variable KW_NULLV_ASSIGN expr			{ $$ = filterx_nullv_assign_new($1, $3); }
	| expr '.' identifier KW_NULLV_ASSIGN expr	{ $$ = filterx_nullv_setattr_new($1, filterx_string_new_frozen($3, configuration), $5); free($3); }
	| expr '[' expr ']' KW_NULLV_ASSIGN expr	{ $$ = filterx_nullv_set_subscript_new($1, $3, $6); }
	| expr '[' ']' KW_NULLV_ASSIGN expr  		{ $$ = filterx_nullv_set_subscript_new($1, NULL, $5); }
	;

generator_assignment
	/* TODO extract lvalues */
	: expr '.' identifier KW_ASSIGN expr_generator
						{
						  filterx_generator_set_fillable($5, filterx_getattr_new(filterx_expr_ref($1), filterx_string_new_frozen($3, configuration)));

						  $$ = filterx_compound_expr_new_va(TRUE,
						    _assign_location(
						      filterx_setattr_new(filterx_expr_ref($1),
						                          filterx_string_new_frozen($3, configuration),
						                          filterx_generator_create_container_new(filterx_expr_ref($5), $1)),
						      lexer, &@$),
						    $5,
						    NULL
                                                  );
						  free($3);
						}
	| expr '[' expr ']' KW_ASSIGN expr_generator
						{
						  filterx_generator_set_fillable($6, filterx_get_subscript_new(filterx_expr_ref($1), filterx_expr_ref($3)));

						  $$ = filterx_compound_expr_new_va(TRUE,
						    _assign_location(
						      filterx_set_subscript_new(filterx_expr_ref($1),
										$3,
										filterx_generator_create_container_new(filterx_expr_ref($6), $1)),
						      lexer, &@$),
						    $6,
						    NULL
						  );
						}
	| expr '[' ']' KW_ASSIGN expr_generator
						{
						  FilterXExpr *minus_one = filterx_literal_new(filterx_integer_new(-1));
						  filterx_generator_set_fillable($5, filterx_get_subscript_new(filterx_expr_ref($1), minus_one));

						  $$ = filterx_compound_expr_new_va(TRUE,
						    _assign_location(
						      filterx_set_subscript_new(filterx_expr_ref($1),
										NULL,
										filterx_generator_create_container_new(filterx_expr_ref($5), $1)),
						      lexer, &@$),
						    $5,
						    NULL
						  );
						}
	| variable KW_ASSIGN expr_generator
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, "dict", NULL, &error);
						  CHECK_FUNCTION_ERROR(func, @1, "dict", error);

						  filterx_generator_set_fillable($3, filterx_expr_ref($1));
						  $$ = filterx_compound_expr_new_va(TRUE,
						    _assign_location(
						      filterx_assign_new($1, filterx_generator_create_container_new(filterx_expr_ref($3), func)),
						      lexer, &@$),
						    $3,
						    NULL
						  );
						}
	| generator_plus_assignment
	| generator_casted_assignment
	;

generator_plus_assignment
	: variable KW_PLUS_ASSIGN expr_generator		{ $$ = $3; filterx_generator_set_fillable($3, $1); }
	| expr '[' expr ']' KW_PLUS_ASSIGN expr_generator	{ $$ = $6; filterx_generator_set_fillable($6, filterx_get_subscript_new($1, $3)); }
	| expr '.' identifier KW_PLUS_ASSIGN expr_generator	{ $$ = $5; filterx_generator_set_fillable($5, filterx_getattr_new($1, filterx_string_new_frozen($3, configuration))); free($3);}

generator_casted_assignment
	/* TODO extract lvalues */
	: variable KW_ASSIGN func_name '(' expr_generator ')'
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, $3, NULL, &error);
						  CHECK_FUNCTION_ERROR(func, @3, $3, error);

						  filterx_generator_set_fillable($5, filterx_expr_ref($1));

						  $$ = filterx_compound_expr_new_va(TRUE,
						    filterx_assign_new($1, func),
						    $5,
						    NULL
						  );
						  free($3);
						}
	| expr '.' identifier KW_ASSIGN func_name '(' expr_generator ')'
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, $5, NULL, &error);
						  CHECK_FUNCTION_ERROR(func, @5, $5, error);

						  filterx_generator_set_fillable($7, filterx_getattr_new(filterx_expr_ref($1), filterx_string_new_frozen($3, configuration)));

						  $$ = filterx_compound_expr_new_va(TRUE,
						    filterx_setattr_new($1, filterx_string_new_frozen($3, configuration), func),
						    $7,
						    NULL
						  );
						  free($3);
						  free($5);
						}
	| expr '[' expr ']' KW_ASSIGN func_name '(' expr_generator ')'
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, $6, NULL, &error);
						  CHECK_FUNCTION_ERROR(func, @6, $6, error);

						  filterx_generator_set_fillable($8, filterx_get_subscript_new(filterx_expr_ref($1), filterx_expr_ref($3)));

						  $$ = filterx_compound_expr_new_va(TRUE,
						    filterx_set_subscript_new($1, $3, func),
						    $8,
						    NULL
						  );
						  free($6);
						}
	| expr '[' ']' KW_ASSIGN func_name '(' expr_generator ')'
						{
						  GError *error = NULL;
						  FilterXExpr *func = filterx_function_lookup(configuration, $5, NULL, &error);
						  CHECK_FUNCTION_ERROR(func, @5, $5, error);

						  FilterXExpr *minus_one = filterx_literal_new(filterx_integer_new(-1));
						  filterx_generator_set_fillable($7, filterx_get_subscript_new(filterx_expr_ref($1), minus_one));

						  $$ = filterx_compound_expr_new_va(TRUE,
						    filterx_set_subscript_new($1, NULL, func),
						    $7,
						    NULL
						  );
						  free($5);
						}
	;

declaration
    : KW_DECLARE filterx_variable KW_ASSIGN expr	{ filterx_variable_expr_declare($2); $$ = filterx_assign_new($2, $4); }
    | KW_DECLARE filterx_variable KW_ASSIGN expr_generator
        {
          GError *error = NULL;
          FilterXExpr *func = filterx_function_lookup(configuration, "dict", NULL, &error);
          CHECK_FUNCTION_ERROR(func, @1, "dict", error);

          filterx_variable_expr_declare($2);

          filterx_generator_set_fillable($4, filterx_expr_ref($2));
          $$ = filterx_compound_expr_new_va(TRUE,
            filterx_assign_new($2, filterx_generator_create_container_new(filterx_expr_ref($4), func)),
            $4,
            NULL
          );
        }
    ;

expr: __expr				{ $$ = _assign_location($1, lexer, &@1); }

__expr
	: expr_value
	| function_call
	| expr_operator
	| '(' expr ')'			{ $$ = $2; }
	| KW_ISSET '(' expr ')'		{ $$ = filterx_isset_new($3); }
	| KW_DROP			{ $$ = filterx_expr_drop_msg(); }
	| KW_DONE			{ $$ = filterx_expr_done(); }
	| KW_BREAK			{ $$ = filterx_expr_break(); }
	;

expr_operator
	: boolalg_operator
	| membership_operator
	| comparison_operator
	| arithmetic_operator
	| ternary
	| default
	/* TODO extract lvalues */
	| expr '.' identifier		{ $$ = filterx_getattr_new($1, filterx_string_new_frozen($3, configuration)); free($3); }
	| expr '[' expr ']'		{ $$ = filterx_get_subscript_new($1, $3); }
	;

boolalg_operator
	: KW_NOT expr { $$ = filterx_unary_not_new($2); }
	| expr KW_OR expr { $$ = filterx_binary_or_new($1, $3); }
	| expr KW_AND expr { $$ = filterx_binary_and_new($1, $3); }
	;

comparison_operator
	: expr KW_TA_LT expr { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_LT); }
	| expr KW_TA_LE expr { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_LT | FCMPX_EQ); }
	| expr KW_TA_EQ expr { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_EQ); }
	| expr KW_TA_NE expr { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_NE ); }
	| expr KW_TA_GE expr { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_EQ | FCMPX_GT); }
	| expr KW_TA_GT expr { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AWARE | FCMPX_GT); }
	| expr KW_STR_LT expr { $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_LT); }
	| expr KW_STR_LE expr { $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_LT | FCMPX_EQ); }
	| expr KW_STR_EQ expr { $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_EQ); }
	| expr KW_STR_NE expr { $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_NE ); }
	| expr KW_STR_GE expr { $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_EQ | FCMPX_GT); }
	| expr KW_STR_GT expr { $$ = filterx_comparison_new($1, $3, FCMPX_STRING_BASED | FCMPX_GT); }
	| expr KW_TAV_EQ expr { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AND_VALUE_BASED | FCMPX_EQ); }
	| expr KW_TAV_NE expr { $$ = filterx_comparison_new($1, $3, FCMPX_TYPE_AND_VALUE_BASED | FCMPX_NE ); }
	| regexp_match
	;

membership_operator
	: expr KW_IN expr { $$ = filterx_membership_in_new($1, $3); }
	| expr KW_NOT KW_IN expr {$$ = filterx_unary_not_new(filterx_membership_in_new($1, $4)); }
	;

arithmetic_operator
	: expr '+' expr { $$ = filterx_operator_plus_new($1, $3); }
	| expr '-' expr { $$ = filterx_arithmetic_operator_substraction_new($1, $3); }
	| expr '*' expr { $$ = filterx_arithmetic_operator_multiplication_new($1, $3); }
	| expr KW_SLASH expr { $$ = filterx_arithmetic_operator_division_new($1, $3); }
	| expr '%' expr { $$ = filterx_arithmetic_operator_modulo_new($1, $3); }
	;

expr_value
	: literal
	| variable
	| template				{ $$ = construct_template_expr($1); }
	;

expr_generator
	: __expr_generator			{
                                                  CHECK_ERROR($1, @1, "error initializing generator expression");
                                                  $$ = _assign_location($1, lexer, &@1);
                                                }
        ;

__expr_generator
	: generator_function_call
	| expr_plus_generator
	| '(' expr_generator ')'		{ $$ = $2; }
	;

expr_plus_generator
	: expr '+' expr_generator		{ $$ = filterx_operator_plus_generator_new($1, $3); }
	| expr_generator '+' expr 		{ $$ = filterx_operator_plus_generator_new($1, $3); }
	| expr_generator '+' expr_generator 	{ $$ = filterx_operator_plus_generator_new($1, $3); }
	;

generator_function_call
	: gen_func_name '(' arguments ')'	{
						  GError *error = NULL;
						  FilterXExpr *res = filterx_generator_function_lookup(configuration, $1, $3, &error);
						  CHECK_FUNCTION_ERROR(res, @$, $1, error);
						  free($1);
						  $$ = res;
						}
	;


function_call
	: func_name '(' arguments ')'		{
						  GError *error = NULL;
						  FilterXExpr *res = filterx_function_lookup(configuration, $1, $3, &error);
						  CHECK_FUNCTION_ERROR(res, @$, $1, error);
						  free($1);
						  $$ = res;
						}
	;

arguments
	: arguments ',' rest_argument		{ $$ = g_list_append($1, $3); }
	| first_argument			{ $$ = g_list_append(NULL, $1); }
	|					{ $$ = NULL; }
	;

first_argument
	: expr					{ $$ = filterx_function_arg_new(NULL, $1); }
	| string KW_ASSIGN expr			{ $$ = filterx_function_arg_new($1, $3); free($1); }
	;

rest_argument
	: first_argument
	;

literal
	: literal_object				{ FilterXObject *literal = $1; filterx_object_freeze(&literal, configuration); $$ = filterx_literal_new(literal); }
	| dict_literal
	| list_literal
	;

literal_object
	: LL_NUMBER				{ $$ = filterx_integer_new($1); }
	| LL_FLOAT				{ $$ = filterx_double_new($1); }
	| KW_NULL				{ $$ = filterx_null_new(); }
	| boolean				{ $$ = filterx_boolean_new($1); }
	| slash_string
	  {
	    /* should be fx_string but we currently support templates as strings */

	    FilterXObject *str = filterx_string_new($1, -1);
	    free($1);
	    $$ = str;
	  }
	| KW_ENUM '(' string '.' string ')'	{
							FilterXObject *res = filterx_enum_new(configuration, $3, $5);
							CHECK_ERROR(res, @1, "enum %s.%s not found", $3, $5);
							free($3);
							free($5);
							$$ = res;
						}
	;

fx_string
	: slash_string
	| string
	;

slash_string
	: KW_SLASH { cfg_lexer_push_slashstring_state(lexer); } LL_STRING { $$ = $3; }
	;

variable
	: '$' identifier			{ $$ = filterx_msg_variable_expr_new($2); free($2); }
	| LL_MESSAGE_REF			{ $$ = filterx_msg_variable_expr_new($1); free($1); }
	| filterx_variable
	;

filterx_variable
	: identifier				{ $$ = filterx_floating_variable_expr_new($1); free($1); }
	;

boolean
	: KW_TRUE				{ $$ = 1; }
	| KW_FALSE				{ $$ = 0; }
	;

template
	: LL_STRING
          {
            GError *error = NULL;
	    LogTemplate *template = log_template_new(configuration, NULL);

            CHECK_ERROR_GERROR(log_template_compile(template, $1, &error), @1, error, "Error compiling template");
            free($1);

            $$ = template;
          }
	;

dict_literal
	: '{' dict_elements '}'
          {
            $$ = filterx_literal_dict_new($2);
          }
	;

dict_elements
	: dict_element ',' dict_elements	{ $$ = g_list_prepend($3, $1); }
	| dict_element				{ $$ = g_list_append(NULL, $1); }
	|					{ $$ = NULL; }
	;

dict_element
	: expr ':' expr				{ $$ = filterx_literal_element_new($1, $3); }
	;

list_literal
	: '[' list_elements ']'
          {
            $$ = filterx_literal_list_new($2);
          }
	;

list_elements
	: list_element ',' list_elements	{ $$ = g_list_prepend($3, $1); }
	| list_element				{ $$ = g_list_append(NULL, $1); }
	|					{ $$ = NULL; }
	;

list_element
	: expr					{ $$ = filterx_literal_element_new(NULL, $1); }
	;

regexp_match
	: expr KW_REGEXP_MATCH fx_string		{ $$ = filterx_expr_regexp_match_new($1, $3); free($3); }
	| expr KW_REGEXP_NOMATCH fx_string		{ $$ = filterx_expr_regexp_nomatch_new($1, $3); free($3); }
	;

conditional
	: if
	| if KW_ELSE block
	  {
            FilterXExpr *tailing_if = filterx_conditional_find_tail($1);
	    filterx_conditional_set_false_branch(tailing_if, $3);
	    $$ = $1;
	  }
	;

if
	: KW_IF '(' expr ')' block
	  {
	    $$ = filterx_conditional_new($3);
            filterx_conditional_set_true_branch($$, $5);
	  }
	| if KW_ELIF '(' expr ')' block
	  {
            FilterXExpr *tailing_if = filterx_conditional_find_tail($1);

	    /* create new conditional */
	    FilterXExpr *elif_expr = filterx_conditional_new($4);
            filterx_conditional_set_true_branch(elif_expr, $6);

	    /* link it into the else branch of the last if */
	    filterx_conditional_set_false_branch(tailing_if, elif_expr);

	    $$ = $1;
	  }
	;


ternary
	: expr '?' expr ':' expr
	  {
	    $$ = filterx_conditional_new($1);
	    filterx_conditional_set_true_branch($$, $3);
	    filterx_conditional_set_false_branch($$, $5);
	  }
	| expr '?' ':' expr
	  {
            $$ = filterx_conditional_new($1);
            filterx_conditional_set_false_branch($$, $4);
	  }
	;

switch_case
	: KW_SWITCH '(' expr ')' '{' cases '}'	{ $$ = filterx_switch_new($3, $6); }
	;

cases
	: case cases				{ if ($1) $$ = g_list_prepend($2, $1); else $$ = $2; }
	|					{ $$ = NULL; }
	;

case
	: KW_CASE expr ':' 			{ $$ = filterx_switch_case_new($2); }
	| KW_DEFAULT ':'			{ $$ = filterx_switch_case_new(NULL); }
	| stmt					{ $$ = $1; }
	;

default
	: expr KW_NULL_COALESCING expr
	  {
	    $$ = filterx_null_coalesce_new($1, $3);
	  }
	;

identifier
	: LL_IDENTIFIER
	| LL_FILTERX_FUNC
	| LL_FILTERX_GEN_FUNC
	;

/*
 * The lexer returns LL_FILTERX_FUNC if a corresponding function
 * is available, so LL_IDENTIFIER will never return a function.
 * However we should use this nonterminal, where we are defining
 * non-generator function related rules, solely for sensible error
 * reporting.
 * (LL_IDENTIFIER will throw a "function not found" error.)
 */
func_name
	: LL_IDENTIFIER
	| LL_FILTERX_FUNC
	;

gen_func_name
	: LL_FILTERX_GEN_FUNC
	;

/* INCLUDE_RULES */

%%
